<project name="Model-Glue Distribution" default="build" basedir=".">
    <description>

        This buildfile defines properties and targets for downloading Model-Glue builds from SVN
        and packaging them as Zip files for distribution.

        INSTRUCTIONS FOR ANT COMMAND-LINE USERS: BUILD A MODEL-GLUE DISTRIBUTION ZIP IN FIVE STEPS

        0. Make sure you have Apache Ant installed. (I didn't really have to tell you that, right?)

        1. Download and extract the zip file for SvnAnt (http://subclipse.tigris.org/svnant.html)
        and copy all the files in the SvnAnt lib directory to the modelgluedistributionfiles/lib directory.

        2. Make sure you have a command-line Git client installed.

        3. Copy the local.properties.example file and save it as local.properties. Open local.properties in a text editor
        and edit the local.profile= setting if needed:

        * To build a distribution zip for the latest official release, use local.profile=latestRelease
        * To build a distribution zip for the latest revision in trunk, use local.profile=bleedingEdge

        4. Open a command-line shell and switch to the directory where you cloned the modelglue-release-builder repository.

        5. Run the following command: ant release (You must have write access to the Git repository to push the new build or
        the last step in the process will fail

        FURTHER INFORMATION

        Look at the main targets defined below (or use ant -projecthelp) for information on the most useful targets available.

        Look at the various properties files under profiles (profile.properties, source.properties, version.properties)
        to see how profiles may be used to create custom builds.

    </description>

    <!-- Default profile is bleedingEdge (i.e. latest copy from develop branch in Git). Used only if local.profile is not set in local.properties -->
    <property name="defaultProfile" value="bleedingEdge" />

    <!-- IMPORT EXTERNAL ANT DEFINITIONS -->

    <import file="localDefs.xml" />
    <import file="gitDefs.xml" />


    <!-- MAIN TARGETS -->
    <target name="build">
        <echo>This is how to use this file:</echo>
    </target>

    <target name="release" depends="clean,workingDirectory,sourceProperties" description="Builds a release of the ModelGlue Framework">

        <!-- Clone repo into a temporary location -->
        <echo>Cloning repo ${source.git.url} into temporary location ${local.exportDirectory}</echo>
        <git-clone dir="${local.workingDirectory}" dest="export" repository="${source.git.url}" />

        <!-- Switch to branch specified by current profile -->
        <echo>Switching temporary repo to ${source.git.branch} branch</echo>
        <git-checkout-local branch="${source.git.branch}" dir="${local.exportDirectory}" />

        <!-- Calculate version number for build -->
        <echo>Determining revision number and updating version properties</echo>
        <!--<antcall target="versionProperties" /> -->
        <git-describe tag="build" dir="${local.exportDirectory}" />
        <property file="${profileDirectory}/version.properties" />

        <!-- Create the new release branch -->
        <echo>Creating a new branch named release-${version.number}</echo>
        <git-branch dir="${local.exportDirectory}" branch="release-${version.number}" />

        <!-- Checkout the new branch -->
        <echo>Checking out newly created branch release-${version.number}</echo>
        <git-checkout-local dir="${local.exportDirectory}"  branch="release-${version.number}" />


        <!-- Do string replacements -->
        <echo>Replacing version number, version label and copyright string tokens</echo>
        <antcall target="mungeProjectFiles" />

        <!-- Commit changes back to the newly created branch -->
        <echo>Committing changes to branch release-${version.number}</echo>
        <git-commit-with-message dir="${local.exportDirectory}" message="Updating revision numbers and copyrights" options="-a" />

        <!-- Create the new tag -->
        <echo>Creating new tag named release-${version.name}</echo>
        <input message="Please enter a description for this tag:" addproperty="commitMessage" />
        <git-tag dir="${local.exportDirectory}" tagName="release-${version.name}" options="-a" message="${commitMessage}" />

        <!-- Push tag and branch to origin -->

        <!--
        <echo>Pushing release branch and tag to ${source.git.url}</echo>
        <git-push-tags dir="${local.exportDirectory}" />
        -->

        <!-- Clean up -->
        <!--
        <antcall target="clean" />
        -->
    </target>

    <target name="clean" depends="checkExportDirectoryAvailability" if="exportDirectoryAvailable">
        <!-- Delete temporary build location -->
        <echo>Cleaning up working directory ${local.workingDirectory}</echo>
        <delete dir="${local.workingDirectory}" />
    </target>


    <!-- REFERENCES -->

    <!-- Patternsets for matching different file types in the project -->

    <!-- Files in the project to be munged and distributed -->
    <patternset id="projectFilesToMunge">
        <include name="**/*.cfm" />
        <include name="**/*.cfc" />
        <include name="**/*.xsl" />
        <include name="**/*.xml" />
        <include name="**/*.htm" />
        <include name="**/*.css" />
        <include name="**/*.js" />
        <include name="ModelGlue/gesture/framework.properties" />
        <exclude name="cfOrmAdapterTest/" />
        <exclude name="modelglueapplicationtemplate/" />
        <exclude name="modelgluedistributionfiles/" />
    </patternset>

    <!-- All project files to be distributed -->
    <patternset id="projectFiles">
        <include name="**/*" />
        <exclude name="cfOrmAdapterTest/" />
        <exclude name="modelgluedistributionfiles/" />
    </patternset>

    <!-- Resource files to be distributed -->
    <patternset id="resourceFiles">
        <include name="readme.txt" />
        <include name="header.txt" />
        <include name="LICENSE" />
        <include name="NOTICE" />
    </patternset>


    <!-- INTERNAL TARGETS -->


    <target name="mungeProjectFiles" depends="profileProperties,versionProperties">
        <replace>
            <fileset dir="${local.exportDirectory}">
                <patternset refid="projectFilesToMunge" />
            </fileset>
            <replacefilter token="@versionLabel@" value="${version.label}" />
            <replacefilter token="@versionNumber@" value="${version.number}" />
        </replace>
    </target>


    <!-- Additional profile properties targets -->

    <target name="sourceProperties" depends="profileDirectory">
        <property file="${profileDirectory}/source.properties" />
    </target>

    <target name="versionProperties" depends="profileDirectory,sourceProperties">
        <!-- Calculate version number for build -->
        <git-describe tag="build" dir="${local.exportDirectory}" />

        <!-- Read in the version.properties file -->
        <property file="${profileDirectory}/version.properties" />
    </target>

    <!-- Export targets -->
    <target name="checkExportDirectoryAvailability">
        <available property="exportDirectoryAvailable" file="${local.exportDirectory}/" />
    </target>

    <target name="workingDirectory" depends="localProperties">
        <mkdir dir="${local.workingDirectory}" />
        <mkdir dir="${local.exportDirectory}" />

    </target>

    <!-- Ant debug targets -->

    <target name="echoLocalProperties" depends="localProperties">
        <echoproperties prefix="local." />
    </target>

    <target name="echoProfileProperties" depends="profileDirectory">
        <echoproperties prefix="profile." />
    </target>

    <target name="echoSourceProperties" depends="sourceProperties">
        <echoproperties prefix="source." />
    </target>

    <target name="echoVersionProperties" depends="versionProperties">
        <echoproperties prefix="version." />
    </target>
</project>
